{"version":3,"sources":["components/Navbar.js","components/Footer.js","components/Header.js","components/BookCard.js","components/SearchForm.js","pages/Search.js","components/SavedBooksCard.js","pages/Saved.js","App.js","registerServiceWorker.js","index.js"],"names":["Navigation","Navbar","bg","variant","Nav","Item","Link","href","Footer","className","Header","Jumbotron","fluid","BookCard","books","saveBook","Container","Row","Col","map","book","key","id","alt","src","volumeInfo","imageLinks","thumbnail","title","authors","length","join","publishedDate","description","previewLink","Button","onClick","SearchForm","useState","userSearch","setUserSearch","setBooks","fetchBooks","e","a","preventDefault","queryURL","fetch","response","json","payload","items","postBooks","config","method","headers","Accept","body","JSON","stringify","console","log","Form","Control","placeholder","size","type","value","onChange","target","newBook","image","link","Search","useEffect","deleteBook","filter","_id","Saved","SavedBooksCard","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"2RAqBeA,EAjBI,WACjB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,KAAf,WAEF,kBAACH,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,UAAf,cCHGC,EARA,WACb,OACE,4BAAQC,UAAU,wDAChB,uBAAGA,UAAU,eAAb,kC,QCQSC,G,MATA,WACb,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACH,UAAU,aACvB,iDACA,kG,yECwCOI,EA1CE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACzB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGJ,EAAMK,KAAI,SAACC,GAAD,OACT,yBAAKC,IAAKD,EAAKE,GAAIb,UAAU,aAC3B,yBAAKA,UAAU,WACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,qBAAqBc,IAAI,aAAaC,IAAMJ,EAAKK,WAAWC,WACnEN,EAAKK,WAAWC,WAAWC,UAC3B,mCAIV,yBAAKlB,UAAU,YACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAcW,EAAKK,WAAWG,OAC5C,uBAAGnB,UAAU,aAAb,cACc,IACXW,EAAKK,WAAWI,SACjBT,EAAKK,WAAWI,QAAQC,OAAS,EAC7BV,EAAKK,WAAWI,QAAQE,KAAK,MAC7BX,EAAKK,WAAWI,SAEtB,uBAAGpB,UAAU,aACX,2BAAOA,UAAU,cAAcW,EAAKK,WAAWO,gBAEjD,uBAAGvB,UAAU,aAAaW,EAAKK,WAAWQ,aAC1C,uBAAG1B,KAAMa,EAAKK,WAAWS,YAAazB,UAAU,qBAAhD,wBAA6F,IAC7F,kBAAC0B,EAAA,EAAD,CAAQhC,QAAQ,UAAUiC,QAAS,kBAAMrB,EAASK,KAAlD,wBCsCLiB,EArEI,WAAO,IAAD,EACaC,mBAAS,IADtB,mBAChBC,EADgB,KACJC,EADI,OAEGF,mBAAS,IAFZ,mBAEhBxB,EAFgB,KAET2B,EAFS,KAIjBC,EAAU,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,2DACbL,EAAWT,OAAS,GADP,wDAEjBa,EAAEE,iBACIC,EAHW,wDAGiDP,GAHjD,SAIMQ,MAAMD,GAJZ,cAIXE,EAJW,gBAKKA,EAASC,OALd,OAKXC,EALW,OAMjBT,EAASS,EAAQC,OAAS,IAC1BX,EAAc,IAPG,4CAAH,sDAuBVY,EAAS,uCAAG,WAAOhC,GAAP,mBAAAwB,EAAA,yEAEVS,EAAS,CACbC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUvC,IARP,SAUO2B,MAVP,aAUuBM,GAVvB,cAUVL,EAVU,gBAWMA,EAASC,OAXf,OAWVC,EAXU,OAYhBU,QAAQC,IAAI,mBAAoBX,GAZhB,2CAAH,sDAef,OACE,oCACE,kBAACY,EAAA,EAAD,KACE,2CACA,kBAACA,EAAA,EAAKC,QAAN,CACEtD,UAAU,eACVuD,YAAY,wBACZC,KAAK,KACLC,KAAK,OACLC,MAAO5B,EACP6B,SAAU,SAACzB,GAAD,OAAOH,EAAcG,EAAE0B,OAAOF,UAE1C,kBAAChC,EAAA,EAAD,CAAQ+B,KAAK,SAASzD,UAAU,OAAO2B,QAASM,GAAhD,WAID5B,EAAMgB,OACL,oCACE,4CACA,kBAAC,EAAD,CAAUhB,MAAOA,EAAOC,SA/Cf,SAACK,GAChB,IAAMkD,EAAU,CACdrC,YAAab,EAAKK,WAAWQ,YAC7BsC,MAAOnD,EAAKK,WAAWC,WACnBN,EAAKK,WAAWC,WAAWC,UAC3B,gCACJ6C,KAAMpD,EAAKK,WAAWS,YACtBN,MAAOR,EAAKK,WAAWG,MACvBC,QAAST,EAAKK,WAAWI,SAE3BuB,EAAUkB,OAwCN,uECrDOG,EAXA,WACb,OACE,6BACE,kBAAC,EAAD,MACA,kBAACzD,EAAA,EAAD,KACE,kBAAC,EAAD,SCuDOH,EA5DE,WAAO,IAAD,EACKyB,mBAAS,IADd,mBACdxB,EADc,KACP2B,EADO,KAGrBiC,qBAAU,YAEQ,uCAAG,8BAAA9B,EAAA,sEACMG,MAFR,cACE,cACXC,EADW,gBAEKA,EAASC,OAFd,OAEXC,EAFW,OAGjBT,EAASS,GAAW,IAHH,2CAAH,qDAKhBR,KACA,IAEF,IAAMiC,EAAU,uCAAG,WAAOrD,GAAP,qBAAAsB,EAAA,6DACjBH,EAAS3B,EAAM8D,QAAO,SAACxD,GAAD,OAAUA,EAAKyD,MAAQvD,MACvCwB,EAFW,qBAEcxB,GACzB+B,EAAS,CACbC,OAAQ,UAJO,SAMMP,MAAMD,EAAUO,GANtB,cAMXL,EANW,gBAOKA,EAASC,OAPd,OAOXC,EAPW,OAQjBU,QAAQC,IAAI,qBAAsBX,GARjB,4CAAH,sDAWhB,OACE,kBAAClC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACA,2CACGH,EAAMgB,OAAS,EACdhB,EAAMK,KAAI,SAACC,GAAD,OACR,yBAAKC,IAAKD,EAAKyD,IAAKpE,UAAU,aAC5B,yBAAKA,UAAU,WACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,qBAAqBc,IAAI,aAAaC,IAAMJ,EAAKmD,MAAQnD,EAAKmD,MAAQ,mCAEvF,yBAAK9D,UAAU,YACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAcW,EAAKQ,OACjC,uBAAGnB,UAAU,aAAb,cACc,IACXW,EAAKS,SAAWT,EAAKS,QAAQC,OAAS,EACnCV,EAAKS,QAAQE,KAAK,MAClBX,EAAKS,SAEX,uBAAGpB,UAAU,aAAaW,EAAKa,aAC/B,uBAAG1B,KAAMa,EAAKoD,KAAM/D,UAAU,qBAA9B,wBAA2E,IAC3E,kBAAC0B,EAAA,EAAD,CAAQhC,QAAQ,SAASiC,QAAS,kBAAMuC,EAAWvD,EAAKyD,OAAxD,sBAOV,uIC7CKC,EATD,WACZ,OACE,6BACE,kBAAC,EAAD,MACA,kBAACC,EAAD,QCaSC,MAbf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,SAASC,UAAWL,KAExC,kBAAC,EAAD,QCNFM,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1B1C,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrB0C,OAAM,SAAAC,GACL5C,QAAQ4C,MAAM,4CAA6CA,M,MC/DjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,GAAN,sBAEN1B,EAwCX,SAAiCO,GAE/B5C,MAAM4C,GACHI,MAAK,SAAA/C,GAGkB,MAApBA,EAASiE,SACuD,IAAhEjE,EAASO,QAAQ2D,IAAI,gBAAgBC,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAMrB,MAAK,SAAAC,GACjCA,EAAaqB,aAAatB,MAAK,WAC7BT,OAAOC,SAAS+B,eAKpB5B,EAAgBC,MAGnBY,OAAM,WACL3C,QAAQC,IACN,oEAzDA0D,CAAwB5B,GAHxBD,EAAgBC,OC5BxB6B,K","file":"static/js/main.c9b57662.chunk.js","sourcesContent":["import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nconst Navigation = () => {\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Nav>\n          <Nav.Item>\n            <Nav.Link href=\"/\">Search</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link href=\"/books\">Saved</Nav.Link>\n          </Nav.Item>\n        </Nav>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"container-fluid pt-4 bg-dark text-light fixed-bottom\">\n      <p className=\"text-center\">Â© 2021 Sandeep Ruby Bassi</p>\n    </footer>\n  )\n}\n\nexport default Footer;\n","import React from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport \"./css/header.css\";\n\nconst Header = () => {\n  return (\n    <Jumbotron fluid className=\"jumbotron\">\n        <h1>Show Me the Books</h1>\n        <h2>Search and save your favourite books from Google Books database</h2>\n    </Jumbotron>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nconst BookCard = ({ books, saveBook }) => {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          {books.map((book) => (\n            <div key={book.id} className=\"card mb-3\">\n              <div className=\"row g-0\">\n                <div className=\"col-md-4\">\n                  <img className=\"cardImage card-img\" alt=\"book cover\" src={ book.volumeInfo.imageLinks\n                        ? book.volumeInfo.imageLinks.thumbnail\n                        : \"https://picsum.photos/200/300\"\n                    }\n                  />\n                </div>\n                <div className=\"col-md-8\">\n                  <div className=\"card-body\">\n                    <h5 className=\"card-title\">{book.volumeInfo.title}</h5>\n                    <p className=\"card-text\">\n                      Written by:{\" \"}\n                      {book.volumeInfo.authors &&\n                      book.volumeInfo.authors.length > 1\n                        ? book.volumeInfo.authors.join(\", \")\n                        : book.volumeInfo.authors}\n                    </p>\n                    <p className=\"card-text\">\n                      <small className=\"text-muted\">{book.volumeInfo.publishedDate}</small>\n                    </p>\n                    <p className=\"card-text\">{book.volumeInfo.description}</p>\n                    <a href={book.volumeInfo.previewLink} className=\"btn btn-secondary\">view on Google Books</a>{' '}\n                    <Button variant=\"success\" onClick={() => saveBook(book)}>save book</Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default BookCard;\n","import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport BookCard from \"./BookCard\";\n\nconst SearchForm = () => {\n  const [userSearch, setUserSearch] = useState(\"\");\n  const [books, setBooks] = useState([]);\n\n  const fetchBooks = async (e) => {\n    if (userSearch.length < 3) return;\n    e.preventDefault();\n    const queryURL = `https://www.googleapis.com/books/v1/volumes?q=${userSearch}`;\n    const response = await fetch(queryURL);\n    const payload = await response.json();\n    setBooks(payload.items || []);\n    setUserSearch(\"\");\n  };\n\n  const saveBook = (book) => {\n    const newBook = {\n      description: book.volumeInfo.description,\n      image: book.volumeInfo.imageLinks\n        ? book.volumeInfo.imageLinks.thumbnail\n        : \"https://picsum.photos/200/300\",\n      link: book.volumeInfo.previewLink,\n      title: book.volumeInfo.title,\n      authors: book.volumeInfo.authors,\n    };\n    postBooks(newBook);\n  };\n\n  const postBooks = async (book) => {\n    const queryURL = `/api/books`;\n    const config = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(book),\n    };\n    const response = await fetch(queryURL, config);\n    const payload = await response.json();\n    console.log(\"book saved to db\", payload);\n  };\n\n  return (\n    <>\n      <Form>\n        <h2>Book Search</h2>\n        <Form.Control\n          className=\"mb-2 mr-sm-2\"\n          placeholder=\"enter title or author\"\n          size=\"lg\"\n          type=\"text\"\n          value={userSearch}\n          onChange={(e) => setUserSearch(e.target.value)}\n        />\n        <Button type=\"submit\" className=\"mb-2\" onClick={fetchBooks}>\n          Search\n        </Button>\n      </Form>\n      {books.length ? (\n        <>\n          <h5>Your Results</h5>\n          <BookCard books={books} saveBook={saveBook} />\n        </>\n      ) : (\n        <p>Your search results will appear below.</p>)}\n    </>\n  );\n};\n\nexport default SearchForm;\n","import React from \"react\";\nimport Header from \"../components/Header\";\nimport SearchForm from \"../components/SearchForm\";\nimport Container from \"react-bootstrap/Container\";\n\nconst Search = () => {\n  return (\n    <div>\n      <Header />\n      <Container>\n        <SearchForm />\n      </Container>\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useState, useEffect } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nconst BookCard = () => {\n  const [books, setBooks] = useState([]);\n\n  useEffect(() => {\n    const queryURL = \"/api/books\";\n    const fetchBooks = async () => {\n      const response = await fetch(queryURL);\n      const payload = await response.json();\n      setBooks(payload || []);\n    };\n    fetchBooks();\n  },[]);\n\n  const deleteBook = async (id) => {\n    setBooks(books.filter((book) => book._id !== id));\n    const queryURL = `/api/books/${id}`;\n    const config = {\n      method: \"DELETE\",\n    };\n    const response = await fetch(queryURL, config);\n    const payload = await response.json();\n    console.log(\"book deleted to db\", payload);\n  };\n\n  return (\n    <Container>\n      <Row>\n      <h4>Saved Books</h4>\n        {books.length > 0 ? (\n          books.map((book) => (\n            <div key={book._id} className=\"card mb-3\">\n              <div className=\"row g-0\">\n                <div className=\"col-md-4\">\n                  <img className=\"cardImage card-img\" alt=\"book cover\" src={ book.image ? book.image : \"https://picsum.photos/200/300\"}/>\n                </div>\n                <div className=\"col-md-8\">\n                  <div className=\"card-body\">\n                    <h5 className=\"card-title\">{book.title}</h5>\n                    <p className=\"card-text\">\n                      Written by:{\" \"}\n                      {book.authors && book.authors.length > 1\n                        ? book.authors.join(\", \")\n                        : book.authors}\n                    </p>\n                    <p className=\"card-text\">{book.description}</p>\n                    <a href={book.link} className=\"btn btn-secondary\">view on Google Books</a>{\" \"}\n                    <Button variant=\"danger\" onClick={() => deleteBook(book._id)}>delete book</Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))\n        ) : (\n          <p>Looks like you haven't saved any books yet. When you save your favourite books they will appear here.</p>\n        )}\n      </Row>\n    </Container>\n  );\n};\n\nexport default BookCard;\n","import React from 'react';\nimport Header from '../components/Header';\nimport SavedBooksCard from '../components/SavedBooksCard';\n\nconst Saved = () => {\n  return (\n    <div>\n      <Header />\n      <SavedBooksCard />\n    </div>\n  )\n}\n\nexport default Saved;\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Navigation from \"./components/Navbar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Search from \"./pages/Search\";\r\nimport Saved from \"./pages/Saved\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Navigation />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Search} />\r\n          <Route exact path=\"/books\" component={Saved} />\r\n        </Switch>\r\n        <Footer />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}